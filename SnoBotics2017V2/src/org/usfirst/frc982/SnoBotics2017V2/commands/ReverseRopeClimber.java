// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc982.SnoBotics2017V2.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc982.SnoBotics2017V2.Robot;

import com.ctre.CANTalon.TalonControlMode;

/**
 *
 */
public class ReverseRopeClimber extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ReverseRopeClimber() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ropeClimber);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    
    
    /**
     *  As of 2/22/17 I'm setting the talons to voltage (percentVbus) mode.
     *  I'd like to experiment with current mode at some point.
     */
    protected void initialize() {
    	Robot.ropeClimber.setMode(TalonControlMode.PercentVbus); // or Current Mode
    }

    // Called repeatedly when this Command is scheduled to run
    /**
     *  Each time the execute method is called it will check to see if button
     *  4 is being pressed, if it is it will control the motor to climb
     *  the rope in response to the co-pilot's joystick. If this button is
     *  not being pressed the command voltage of the ropeClimber will
     *  be set to 0.
     *  
     *  Note that the definition of this joystick button is done in oi.java.
     *  As of this writing that has been defined as button 6.
     *  
     *  I would like to add checks for the current being used as well
     *  and display this value.
     *  
     *  I'm not sure how efficient this is, but I'll declare the variables used
     *  outside of the procedure.
     *  
     */
    
    boolean collectedButtonState = false;
    boolean buttonState0 = false;
    boolean buttonState1 = false;
    boolean buttonState2 = false;
    double axisValue    = 0;
    
    protected void execute() {
    	/**
    	 *  Once the button state become false, by releasing the button the rope climber
    	 *  is stopped by setting the voltage to 0.
    	 */
    	buttonState0 = Robot.oi.buttonToConfirmRopeClimber.get();
    	buttonState1 = Robot.oi.button1ToConfirmReverseRopeClimber.get();
    	buttonState2 = Robot.oi.button2ToConfirmReverseRopeClimber.get();
    	collectedButtonState = buttonState0 && buttonState1 && buttonState2;
    	
    	if (collectedButtonState) {
    		axisValue = Robot.oi.coPilotJoystick.getY();
    		Robot.ropeClimber.setMotorVoltage(axisValue);
    	} else {
    		Robot.ropeClimber.setMotorVoltage(0);
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    /**
     *   Don't check for the current draw until the command has been run for
     *   at least 1 second. The hard wired max is set to 38 Amps.
     *   
     *   The other more interesting stopping point will be when the robot
     *   has tripped the sensor at the top of the rope.
     */
    protected boolean isFinished() {
    	buttonState0 = Robot.oi.buttonToConfirmRopeClimber.get();
    	buttonState1 = Robot.oi.button1ToConfirmReverseRopeClimber.get();
    	buttonState2 = Robot.oi.button2ToConfirmReverseRopeClimber.get();
    	collectedButtonState = !(buttonState0 && buttonState1 && buttonState2);
    	
    	return collectedButtonState;
    }


    // Called once after isFinished returns true
    protected void end() {
    	Robot.ropeClimber.setMotorVoltage(0.0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	Robot.ropeClimber.setMotorVoltage(0);
    }
}
